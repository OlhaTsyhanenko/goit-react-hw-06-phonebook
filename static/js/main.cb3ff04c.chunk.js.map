{"version":3,"sources":["components/ContactList/contactList.module.css","components/Filter/filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactForm/contactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","items","createReducer","actions","state","filter","contact","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","persistor","persistStore","getItems","getValue","getVisibleContacts","allContacts","normalizedFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","nameInputId","numberInputId","handleChange","e","target","value","reset","className","styles","contactForm","onSubmit","preventDefault","find","repeatName","alert","htmlFor","type","pattern","title","required","onChange","contactName","contactNumber","btn","ContactList","contactList","map","contactList__item","onClick","Filter","label","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.cb3ff04c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"contactList_btn__24V0C\",\"contactList\":\"contactList_contactList__2Qoz6\",\"contactList__item\":\"contactList_contactList__item__c5wDU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"filter_filter__2xCST\",\"label\":\"filter_label__27sXR\"};","import { createAction } from \"@reduxjs/toolkit\";\r\nimport shortid from \"shortid\";\r\n// import types from './contacts-types';\r\n\r\nconst addContact = createAction('contacts/add', (name, number) => {\r\n    return {\r\n        payload: {\r\n        name,\r\n        number,\r\n        id: shortid.generate(),\r\n    }\r\n    }\r\n});\r\nconst deleteContact =  createAction('contacts/delete');\r\nconst changeFilter = createAction('contacts/filter');\r\n\r\n// const addContact = (name, number) => ({\r\n//     type: types.ADD,\r\n//     payload: {\r\n//         name,\r\n//         number,\r\n//         id: shortid.generate(),\r\n//     }\r\n// });\r\n\r\n// const deleteContact = (contactId) => ({\r\n//     type: types.DELETE,\r\n//     payload: contactId,\r\n// });\r\n\r\n// const changeFilter = value => ({\r\n//     type: types.FILTER,\r\n//     payload: value,\r\n// })\r\n\r\n\r\n export default { addContact, deleteContact, changeFilter };","import { combineReducers } from 'redux';\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n// import types from './contacts-types';\r\nimport actions from \"./contacts-actions\";\r\n\r\nconst items = createReducer([], {\r\n    [actions.addContact]: (state, { payload }) => [...state, payload],\r\n    [actions.deleteContact]: (state, {payload}) => state.filter(contact => contact.id !== payload),\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [actions.changeFilter]: (_, {payload}) => payload,\r\n})\r\n\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.ADD:\r\n//                 if (state.find(contact => contact.name.toLowerCase() === payload.name.toLowerCase())) {\r\n//       alert(`${payload.name} is already in contacts`);\r\n//       return state;\r\n//     }\r\n//             return [...state, payload];\r\n//         case types.DELETE:\r\n//             console.log(state);\r\n//             console.log(payload);\r\n//             return state.filter(contact => contact.id !== payload);\r\n//         default:\r\n//            return state; \r\n//     }\r\n// }\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.FILTER:\r\n//             return payload;\r\n//         default:\r\n//            return state; \r\n//     }\r\n// }\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n}) ","// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n// import reducer from './contacts/contacts-reducer';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\nimport { persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER, } from 'redux-persist';\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nconst contactsPersistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter'],\r\n}\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n    },\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }).concat(logger),\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default {store, persistor};\r\n\r\n","export const getItems = state => state.contacts.items;\r\nexport const getValue = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n    const allContacts = getItems(state);\r\n    const filter = getValue(state);\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return allContacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n};","import { useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\n// import PropTypes from \"prop-types\";\nimport shortid from \"shortid\";\nimport actions from \"../../redux/contacts/contacts-actions\";\nimport { getItems } from \"../../redux/contacts/contacts-selectors\";\nimport styles from \"./contactForm.module.css\";\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const items = useSelector(getItems);\n  const dispatch = useDispatch();\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const repeatName = name => items.find(contact => contact.name.toLowerCase() === name.toLowerCase());\n    if (repeatName(name)) {\n      alert(`${name} is already in contacts`);\n    } else {\n      dispatch(actions.addContact(name, number));\n    }\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  \n  return (\n    <form className={styles.contactForm} onSubmit={handleSubmit}>\n      <label htmlFor={nameInputId}>Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChange}\n          id={nameInputId}\n          className={styles.contactName}\n        />\n      </label>\n      <label htmlFor={numberInputId}>Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleChange}\n          id={numberInputId}\n          className={styles.contactNumber}\n        />\n      </label>\n      <button type=\"submit\" className={styles.btn}>Add contact</button>\n    </form>\n  );\n}\n\n// function ContactForm({items, onAddContact}) {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const nameInputId = shortid.generate();\n//   const numberInputId = shortid.generate();\n  \n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         break;\n//       case 'number':\n//         setNumber(value);\n//         break;\n//       default:\n//         return;\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     if (items.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n//             alert(`${name} is already in contacts`);\n//             return;\n//         }\n//     onAddContact(name,number);\n//     reset();\n//   };\n\n//   const reset = () => {\n//     setName('');\n//     setNumber('');\n//   };\n  \n//   return (\n//     <form className={styles.contactForm} onSubmit={handleSubmit}>\n//       <label htmlFor={nameInputId}>Name\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           value={name}\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//           required\n//           onChange={handleChange}\n//           id={nameInputId}\n//           className={styles.contactName}\n//         />\n//       </label>\n//       <label htmlFor={numberInputId}>Number\n//         <input\n//           type=\"tel\"\n//           name=\"number\"\n//           value={number}\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//           required\n//           onChange={handleChange}\n//           id={numberInputId}\n//           className={styles.contactNumber}\n//         />\n//       </label>\n//       <button type=\"submit\" className={styles.btn}>Add contact</button>\n//     </form>\n//   );\n// }\n\n// ContactForm.propTypes = {\n//   onAddContact: PropTypes.func,\n// }\n\n// const mapStateToProps = state => ({\n//     items: state.contacts.items,\n//   });\n\n// const mapDispatchToProps = dispatch => ({\n//   onAddContact: (name, number) => dispatch(actions.addContact(name, number))\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","// import PropTypes from \"prop-types\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport styles from \"./contactList.module.css\";\nimport actions from \"../../redux/contacts/contacts-actions\";\nimport { getVisibleContacts } from \"../../redux/contacts/contacts-selectors\";\n\nexport default function ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={styles.contactList}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={styles.contactList__item}>\n          {name}: {number}\n          <button\n            type=\"button\"\n            onClick={() => dispatch(actions.deleteContact(id))}\n            className={styles.btn}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\n// function ContactList({ contacts, onDeleteContact }) {\n//   return (\n//     <ul className={styles.contactList}>\n//       {contacts.map(({ id, name, number }) => (\n//         <li key={id} className={styles.contactList__item}>\n//           {name}: {number}\n//           <button\n//             type=\"button\"\n//             onClick={() => onDeleteContact(id)}\n//             className={styles.btn}\n//           >\n//             Delete\n//           </button>\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// }\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.array,\n//   onDeleteContact: PropTypes.func,\n// };\n\n// const getVisibleContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n//   return allContacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// const mapStateToProps = state => {\n//   const { filter, items } = state.contacts;\n//   const visibleContacts = getVisibleContacts(items,filter)\n//   return {\n//     contacts: visibleContacts,\n//   }\n// };\n\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: (id) => dispatch(actions.deleteContact(id)),\n// });\n\n// export default connect(mapStateToProps,mapDispatchToProps)(ContactList);\n","// import PropTypes from \"prop-types\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport actions from \"../../redux/contacts/contacts-actions\";\nimport { getValue } from \"../../redux/contacts/contacts-selectors\";\nimport styles from \"./filter.module.css\";\n\nexport default function Filter() {\n  const value = useSelector(getValue);\n  const dispatch = useDispatch();\n  return (\n    <label className={styles.filter}>\n      <span className={styles.label}>Find contacts by name</span>\n      <input type=\"text\" value={value} onChange={(e) => dispatch(actions.changeFilter(e.target.value))}></input>\n    </label>\n  );\n}\n\n// function Filter({ value, onChange }) {\n//   return (\n//     <label className={styles.filter}>\n//       <span className={styles.label}>Find contacts by name</span>\n//       <input type=\"text\" value={value} onChange={onChange}></input>\n//     </label>\n//   );\n// }\n\n// Filter.propTypes = {\n//   value: PropTypes.string,\n//   onChange: PropTypes.func,\n// };\n\n// const mapStateToProps = state => ({\n//     value: state.contacts.filter,\n//   });\n\n\n// const mapDispatchToProps = dispatch => ({\n//     onChange: (e) => dispatch(actions.changeFilter(e.target.value)),\n//   });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import \"./App.css\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\n\nexport default function App() {\n    \n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n  \n}\n\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport  store  from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>    \n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"contactForm_contactForm__1ZkBF\",\"contactName\":\"contactForm_contactName__2nfUX\",\"contactNumber\":\"contactForm_contactNumber__1mZ5e\",\"btn\":\"contactForm_btn__3MUw0\"};"],"sourceRoot":""}